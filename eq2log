#!/usr/bin/env ruby
# == Synopsis
#
# eq2log: parses an EQ2 log file
#
# == Usage
#
# eq2log [OPTION] ... CONFIG LOG
#
# CONFIG: YAML configuration file defining the rull set for parsing.
#
# LOG: Log file to parse
#
# == Example configuration:
#   ---
#   start: 2009-6-17 22:30:31
#   end:   2009-6-17 22:33:06
#   
#   filters:
#     - !ruby/regexp '/You tell Someone/i'
#     - !ruby/regexp '/Someone:Someone/'
# 

require 'getoptlong'
require 'rdoc/usage'
require 'yaml'
require 'date'

class EQ2LogFilter
  SCRUBBERS = {
    /^\\aPC -1 (\S+):\S+\\\/a (.*)$/, proc {|line, person, action| "#{person} #{action}"}
  }
  LINE = /^\(\d+\)\[(\w+ \w+ \d+ \d+:\d+:\d+ \d+)\] (.*)/
  
  def parse(config, log_file)
    File.open(log_file, 'r') do |f|
      f.each_line do |l|
        next unless result = LINE.match(l)
        full, date, text = result.to_a
        
        within_date_range(date, config['start'], config['finish']) do
          unless config['filters'].select {|r| (text =~ r) != nil}.empty?
            puts "[#{date}] #{scrub(text)}"
          end
        end
      end
    end
  end
  private
    def within_date_range(date, start, finish)
      date = DateTime.parse(date)
      if start.nil? or date >= DateTime.parse(start)
        if finish.nil? or date <= DateTime.parse(finish)
          yield date
        end
      end
    end
    def scrub(text)
      result = SCRUBBERS.select {|r, t| (text =~ r) != nil}.first
      return text unless result
      
      regex = result.first
      transformer = result.last
      
      transformer.call(*regex.match(text).to_a)
    end
end

if __FILE__ == $0
  GetoptLong.new(
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ]
  ).each do |opt, arg|
    case opt
    when '--help'
      RDoc::usage
    end
  end

  if ARGV.length != 2
    puts "Invalid number of arguments. (try --help)"
    exit 0
  end

  config = YAML.load_file(ARGV.shift)
  
  EQ2LogFilter.new.parse(config, *ARGV)
end